<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="SendEmail" script:language="StarBasic">

Rem ╔════════════════════════════════════════════════════════════════════════════════════╗
Rem ║                                                                                    ║
Rem ║   Copyright (c) 2020-24 https://prrvchr.github.io                                  ║
Rem ║                                                                                    ║
Rem ║   Permission is hereby granted, free of charge, to any person obtaining            ║
Rem ║   a copy of this software and associated documentation files (the &quot;Software&quot;),     ║
Rem ║   to deal in the Software without restriction, including without limitation        ║
Rem ║   the rights to use, copy, modify, merge, publish, distribute, sublicense,         ║
Rem ║   and/or sell copies of the Software, and to permit persons to whom the Software   ║
Rem ║   is furnished to do so, subject to the following conditions:                      ║
Rem ║                                                                                    ║
Rem ║   The above copyright notice and this permission notice shall be included in       ║
Rem ║   all copies or substantial portions of the Software.                              ║
Rem ║                                                                                    ║
Rem ║   THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,                  ║
Rem ║   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES                  ║
Rem ║   OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.        ║
Rem ║   IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY             ║
Rem ║   CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,             ║
Rem ║   TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE       ║
Rem ║   OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                    ║
Rem ║                                                                                    ║
Rem ╚════════════════════════════════════════════════════════════════════════════════════╝

Sub Main

    Rem Ask the user for the sender&apos;s email address.
    sSender = InputBox(&quot;Please enter the sender&apos;s email address&quot;)
    Rem User clicked Cancel.
    if sSender = &quot;&quot; then
        exit sub
    endif

    Rem Ask the user for recipient&apos;s email address.
    sRecipient = InputBox(&quot;Please enter the recipient&apos;s email address&quot;)
    Rem User clicked Cancel.
    if sRecipient = &quot;&quot; then
        exit sub
    endif

    Rem Ask the user for email&apos;s subject.
    sSubject = InputBox(&quot;Please enter the email&apos;s subject&quot;)
    Rem User clicked Cancel.
    if sSubject = &quot;&quot; then
        exit sub
    endif

    Rem Ask the user for email&apos;s content.
    sBody = InputBox(&quot;Please enter the email&apos;s content&quot;)
    Rem User clicked Cancel.
    if sBody = &quot;&quot; then
        exit sub
    endif

    Rem Ok now we have everything, we start sending an email.

    Rem We will use 4 UNO services which are:
    Rem - com.sun.star.mail.MailUser: This is the service which will ensure the correct configuration
    Rem   of SMTP and IMAP servers (we can thank Mozilla for the ISPBD database that I use).
    Rem - com.sun.star.mail.MailServiceProvider: This is the service that allows you to use SMTP and
    Rem   IMAP servers. We will use this service with the help of the previous service.
    Rem - com.sun.star.datatransfer.TransferableFactory: This service is a forge for the creation of
    Rem   Transferable which are the basis of the body of the email as well as these attached files.
    Rem - com.sun.star.mail.MailMessage: This is the service that implements the email message.
    Rem Now that everything is clear we can begin.


    Rem First we create the email.

    Rem This is our Transferable forge, it greatly simplifies the LibreOffice mail API...
    oTransferable = createUnoService(&quot;com.sun.star.datatransfer.TransferableFactory&quot;)

    Rem oBody is the body of the email. It is created here from a String but could also
    Rem have been created from an InputStream, a file Url (file://...) or a sequence of bytes.
    oBody = oTransferable.getByString(sBody)

    Rem oMail is the email message. It is created from the com.sun.star.mail.MailMessage service.
    Rem It can be created with an attachment with the createWithAttachment() method.
    oMail = com.sun.star.mail.MailMessage.create(sRecipient, sSender, sSubject, oBody)

    Rem Ask the user for the URLs of the attached files.
    oDialog = createUnoService(&quot;com.sun.star.ui.dialogs.FilePicker&quot;)
    oDialog.setMultiSelectionMode(true)
    if oDialog.execute() = com.sun.star.ui.dialogs.ExecutableDialogResults.OK then
        oFiles() = oDialog.getSelectedFiles()
        Rem These two services are simply used to get a suitable file name.
        oUrlTransformer = createUnoService(&quot;com.sun.star.util.URLTransformer&quot;)
        oUriFactory = createUnoService(&quot;com.sun.star.uri.UriReferenceFactory&quot;)
        for i = lbound(oFiles()) To ubound(oFiles())
            oUri = getUri(oUrlTransformer, oUriFactory, oFiles(i))
            oAttachment = createUnoStruct(&quot;com.sun.star.mail.MailAttachment&quot;)
            Rem ReadableName must be entered. This is the name of the attached file
            Rem as it appears in the email. Here we get the file name.
            oAttachment.ReadableName = oUri.getPathSegment(oUri.getPathSegmentCount() - 1)
            Rem The attachment is retrieved from an Url but same as for oBody
            Rem it can be retrieved from a String, an InputStream or a sequence of bytes.
            oAttachment.Data = oTransferable.getByUrl(oUri.getUriReference())
            oMail.addAttachment(oAttachment)
            next i
    endif
    Rem End of creating the email.


    Rem Now we need to send the email.

    Rem First we create a MailUser from the sender address. This is not necessary the
    Rem sender address but it must follow the rfc822 (ie: my surname &lt;myname@myisp.com&gt;).
    Rem The IspDB Wizard will automatically be launched if this user has never been configured.
    oUser = com.sun.star.mail.MailUser.create(sSender)
    Rem User canceled IspDB Wizard.
    if isNull(oUser) then
        exit sub
    endif

    Rem Now that we have the user we can check if they want to use a Reply-To address.
    if oUser.useReplyTo() then
        oMail.ReplyToAddress = oUser.getReplyToAddress()
    endif
    Rem In the same way I can test if the user has an IMAP configuration with oUser.supportIMAP()
    Rem and then create an email thread if necessary. In this case you must:
    Rem - Construct an email message thread (as done previously for oMail).
    Rem - Create and connect to an IMAP server (as we will do for SMTP).
    Rem - Upload this email to the IMAP server with: oServer.uploadMessage(oServer.getSentFolder(), oMail).
    Rem - Once it has been uploaded, retrieve the MessageId with the oMail.MessageId property.
    Rem - Set the oMail.ThreadId property to MessageId for all subsequent emails.
    Rem Great you have successfully grouped the sending of emails into a thread.

    Rem To send the email we need to create an SMTP server. Here&apos;s how to do it:
    SMTP = com.sun.star.mail.MailServiceType.SMTP
    oServer = createUnoService(&quot;com.sun.star.mail.MailServiceProvider&quot;).create(SMTP)
    Rem Now we connect using the SMTP user&apos;s configuration.
    oServer.connect(oUser.getConnectionContext(SMTP), oUser.getAuthenticator(SMTP))
    Rem Well, that&apos;s it, we are connected, all we have to do is send the email.
    oServer.sendMailMessage(oMail)
    Rem Don&apos;t forget to close the connection.
    oServer.disconnect()
    MsgBox &quot;The email has been sent successfully.&quot; &amp; chr(13) &amp; &quot;Its MessageId is: &quot; &amp; oMail.MessageId

    Rem Et voilà, you have it, it took less than 40 lines of code so enjoy...
    Rem On the other hand, this is only an example of popularization,
    Rem and all the necessary error checks are not in place...

End Sub


Function getUri(oUrlTransformer As Variant, oUriFactory As Variant, sUrl As String) As Variant
    oUrl = createUnoStruct(&quot;com.sun.star.util.URL&quot;)
    oUrl.Complete = sUrl
    oUrlTransformer.parseStrict(oUrl)
    oUri = oUriFactory.parse(oUrlTransformer.getPresentation(oUrl, false))
    getUri = oUri
End Function


</script:module>
