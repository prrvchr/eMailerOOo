/*
╔════════════════════════════════════════════════════════════════════════════════════╗
║                                                                                    ║
║   Copyright (c) 2020-25 https://prrvchr.github.io                                  ║
║                                                                                    ║
║   Permission is hereby granted, free of charge, to any person obtaining            ║
║   a copy of this software and associated documentation files (the "Software"),     ║
║   to deal in the Software without restriction, including without limitation        ║
║   the rights to use, copy, modify, merge, publish, distribute, sublicense,         ║
║   and/or sell copies of the Software, and to permit persons to whom the Software   ║
║   is furnished to do so, subject to the following conditions:                      ║
║                                                                                    ║
║   The above copyright notice and this permission notice shall be included in       ║
║   all copies or substantial portions of the Software.                              ║
║                                                                                    ║
║   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,                  ║
║   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES                  ║
║   OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.        ║
║   IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY             ║
║   CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,             ║
║   TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE       ║
║   OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                    ║
║                                                                                    ║
╚════════════════════════════════════════════════════════════════════════════════════╝
 */

#ifndef __com_sun_star_mail_XMailSpooler_idl__
#define __com_sun_star_mail_XMailSpooler_idl__

#include <com/sun/star/lang/XServiceInfo.idl>
#include <com/sun/star/sdbc/XConnection.idl>
#include <com/sun/star/sdbc/XResultSet.idl>
#include <com/sun/star/sdbc/XRowSetListener.idl>
#include <com/sun/star/task/XStatusIndicator.idl>

module com { module sun { module star { module mail {

interface XMailSpooler : com::sun::star::lang::XServiceInfo
{

    com::sun::star::sdbc::XConnection getConnection();

    com::sun::star::sdbc::XResultSet getContent();

    com::sun::star::sdbc::XResultSet getSendJobs();

    com::sun::star::sdbc::XResultSet getJobs([in] sequence<long> JobIds);

    void addContentListener([in] com::sun::star::sdbc::XRowSetListener Listener);

    void removeContentListener([in] com::sun::star::sdbc::XRowSetListener Listener);

    com::sun::star::sdbc::XResultSet getRecipientContent([in] long JobId);

    sequence<string> getBatchAttachments([in] long BatchId);

    com::sun::star::sdbc::XResultSet getBatchContent([in] long BatchId);

    long addJob([in] string Sender,
                [in] string Subject,
                [in] string Document,
                [in] sequence<string> Recipients,
                [in] sequence<string> Attachments);

    long addMergeJob([in] string Sender,
                     [in] string Subject,
                     [in] string Document,
                     [in] string DataSource,
                     [in] string Query,
                     [in] string Table,
                     [in] sequence<string> Recipients,
                     [in] sequence<string> Filters,
                     [in] sequence<string> Predicates,
                     [in] sequence<string> Addresses,
                     [in] sequence<string> Identifiers,
                     [in] sequence<string> Attachments);

    boolean removeJobs([in] sequence<long> JobIds);

    long getJobState([in] long JobId);

    sequence<long> getJobIds([in] long BatchId);

    sequence<long> getSpoolerJobs([in] short State);

    void setJobState([in] long JobId,
                     [in] short State);

    void setJobsState([in] sequence<long> JobIds,
                      [in] short State);

    void updateJob([in] long BatchId,
                   [in] long JobId,
                   [in] string Recipient,
                   [in] string ThreadId,
                   [in] string MessageId,
                   [in] string ForeignId,
                   [in] short State);

    sequence<long> resubmitJobs([in] sequence<long> JobIds);

};

}; }; }; };

#endif
